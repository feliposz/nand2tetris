class Logo {

    field boolean quit, error;
    field String cmd;
    field Turtle turtle;

    constructor Logo new() {
        let turtle = Turtle.new();
        return this;
    }

    method void dispose() {
        do turtle.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run() {
        do cmdClear();
        while (~quit) {
            do promptUser();
            do processCommand();
        }
        do StringUtil.printConstant("Goodbye! :D");
        return;
    }

    method void promptUser() {
        // Clear message/prompt area
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 232, 511, 255);
        if (error) {
            do Output.moveCursor(21, 0);
            do StringUtil.printConstant("Unknown command: ");
            do Output.printString(cmd);
            do StringUtil.printConstant(" (type HELP)");
        }
        if (~(cmd = null)) {
            do cmd.dispose();
            let cmd = null;
        }
        do Output.moveCursor(22, 0);
        let cmd = Keyboard.readLine("?");
        return;
    }

    method void processCommand() {
        let error = true;
        if (StringUtil.equalsConstant(cmd, "QUIT")) {
            let quit = true;
            let error = false;
        }
        if (StringUtil.equalsConstant(cmd, "HELP")) {
            do cmdHelp();
            let error = false;
        }
        if (StringUtil.equalsConstant(cmd, "CLEAR")) {
            do cmdClear();
            let error = false;
        }
        if (StringUtil.equalsConstant(cmd, "TEST")) {
            do test();
            let error = false;
        }
        if (StringUtil.equalsConstant(cmd, "FD")) {
            do cmdForward();
            let error = false;
        }
        if (StringUtil.equalsConstant(cmd, "BK")) {
            do cmdBack();
            let error = false;
        }
        if (StringUtil.equalsConstant(cmd, "RT")) {
            do cmdRight();
            let error = false;
        }
        if (StringUtil.equalsConstant(cmd, "LT")) {
            do cmdLeft();
            let error = false;
        }
        if (StringUtil.equalsConstant(cmd, "PD")) {
            do turtle.penDown();
            let error = false;
        }
        if (StringUtil.equalsConstant(cmd, "PU")) {
            do turtle.penUp();
            let error = false;
        }
        return;
    }

    method void cmdHelp() {
        do Screen.clearScreen();
        do Output.moveCursor(0, 0);
        do StringUtil.printConstant("HELP"); do Output.println();
        do StringUtil.printConstant("----"); do Output.println();
        do Output.println();
        do StringUtil.printConstant("HELP    Show this help screen"); do Output.println();
        do StringUtil.printConstant("CLEAR   Clear screen"); do Output.println();
        do StringUtil.printConstant("QUIT    Quit program"); do Output.println();
        do Output.println();
        do StringUtil.printConstant("FD      Move forward"); do Output.println();
        do StringUtil.printConstant("BK      Move backwards"); do Output.println();
        do StringUtil.printConstant("RT      Turn right"); do Output.println();
        do StringUtil.printConstant("LT      Turn left"); do Output.println();
        do StringUtil.printConstant("PD      Pen down (start drawing)"); do Output.println();
        do StringUtil.printConstant("PU      Pen up (stop drawing)"); do Output.println();
        return;
    }

    method void cmdClear() {
        do Screen.clearScreen();
        do turtle.reset();
        do turtle.draw();
        return;
    }

    method void test() {
        var int a, count, sides, i;
        do Screen.clearScreen();
        do turtle.reset();
        // draw a test pattern
        // do Output.moveCursor(0, 0);
        // let count = 23 * 64;
        // while (count > 0) {
        //     do Output.printChar(65 + (count&31));
        //     let count = count - 1;
        // }
        // do turtle._saveFrame();
        let sides = 3;
        while (sides < 20) {
            do cmdClear();
            do Output.moveCursor(3, 0);
            do Output.printInt(sides);
            // do turtle.penUp();
            // do turtle.setXY(-250 + (sides * 10), 0);
            // do turtle.setH(0);
            // do turtle.draw();
            // do turtle.penDown();
            let i = 0;
            while (i < sides) {
                do turtle.forward(300 / sides);
                do turtle.draw();
                do turtle.right(360 / sides);
                do turtle.draw();
                let a = a + (360 / sides);
                let i = i + 1;
            }
            let sides = sides + 1;
            do turtle._debug();
            do Keyboard.readChar();
        }
        if (false) {
            do turtle.setXY(0, 0);
            do turtle.setH(0);
            let a = 0;
            while (a < 37) {
                do turtle.forward(10);
                do turtle.draw();
                do turtle.left(10);
                //do Keyboard.readChar();
                let a = a + 1;
            }
            do turtle.setXY(0, 0);
            do turtle.setH(0);
            let a = 0;
            while (a < 10) {
                do turtle.right(90);
                do turtle.forward(20);
                do turtle.draw();
                do turtle.left(90);
                do turtle.forward(20);
                do turtle.draw();
                let a = a + 1;
            }
        }
        if (false) {
            do turtle.right(45);
            do turtle.forward(50);
            do turtle.draw();
            do turtle.left(90);
            do turtle.forward(50);
            do turtle.draw();
        }
        let quit = true;
        return;
    }

    method void hello() {
        do StringUtil.printConstant("Hello, world! ");
        if (Keyboard.keyPressed() = 140) {
            let quit = true;
        }
        return;
    }

    method void cmdForward() {
        var int dist;
        do Output.moveCursor(22, 0);
        let dist = Keyboard.readInt("Move forward. Distance?");
        if ((dist < 0) | (dist > 320)) {
            do StringUtil.printConstant("Sorry, I can't move that much. :(");
        } else {
            do turtle.forward(dist);
            do turtle.draw();
        }
        return;
    }

    method void cmdBack() {
        var int dist;
        do Output.moveCursor(22, 0);
        let dist = Keyboard.readInt("Move back. Distance?");
        if ((dist < 0) | (dist > 320)) {
            do StringUtil.printConstant("Sorry, I can't move that much. :(");
        } else {
            do turtle.back(dist);
            do turtle.draw();
        }
        return;
    }

    method void cmdRight() {
        var int angle;
        do Output.moveCursor(22, 0);
        let angle = Keyboard.readInt("Turn right. Angle?");
        if ((angle < 0) | (angle > 360)) {
            do StringUtil.printConstant("Sorry, I can't turn that much. :(");
        } else {
            do turtle.right(angle);
            do turtle.draw();
        }
        return;
    }

    method void cmdLeft() {
        var int angle;
        do Output.moveCursor(22, 0);
        let angle = Keyboard.readInt("Turn left. Angle?");
        if ((angle < 0) | (angle > 360)) {
            do StringUtil.printConstant("Sorry, I can't turn that much. :(");
        } else {
            do turtle.left(angle);
            do turtle.draw();
        }
        return;
    }

}