class Logo {

    field boolean quit, error;
    field String message;
    field Turtle turtle;

    constructor Logo new() {
        let turtle = Turtle.new();
        return this;
    }

    method void dispose() {
        do turtle.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run() {
        var String input;
        do cmdClear();
        while (~quit) {
            let input = promptUser();
            do parseInput(input);
            do input.dispose();
        }
        do Output.moveCursor(21, 0);
        do StringUtil.printConstant("Goodbye! :D ");
        return;
    }

    method String promptUser() {
        // Clear message/prompt area
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 232, 511, 255);
        if (error) {
            do Output.moveCursor(21, 0);
            if (message) {
                do Output.printString(message);
                do message.dispose();
                let message = null;
            }
        }
        do Output.moveCursor(22, 0);
        return Keyboard.readLine("?");
    }

    method void parseInput(String input) {
        var int len, i, tokens, arg, sign;
        var boolean break;
        var String cmd;

        let len = input.length();

        // allow multiple commands per line
        while (i < len) {

            let cmd = String.new(len-i);

            let i = skipSpace(input, len, i);

            // get command
            let break = false;
            while ((i < len) & ~break) {
                if ((input.charAt(i) > 64) & (input.charAt(i) < 91)) { // letter A-Z
                    do cmd.appendChar(input.charAt(i));
                    let i = i + 1;
                } else {
                    // not a letter
                    let break = true;
                }
            }

            let i = skipSpace(input, len, i);

            // parse numeric argument
            let arg = 0;
            let break = false;
            if (i < len) {
                if (input.charAt(i) = 45) { // minus sign
                    let sign = -1;
                    let i = i + 1;
                } else {
                    let sign = 1;
                }
                while ((i < len) & ~break) {
                    if ((input.charAt(i) > 47) & (input.charAt(i) < 58)) { // digit 0-9
                        let arg = (arg * 10) + (input.charAt(i) - 48);
                        let i = i + 1;
                    } else {
                        // not a digit
                        let break = true;
                    }
                }
                let arg = arg * sign;
            }

            if (StringUtil.equalsConstant(cmd, "REPEAT")) {
                let i = processRepeat(arg, input, i);
            } else {
                if (cmd.length() > 0) {
                    do processCommand(cmd, arg);
                }
            }

            do cmd.dispose();

            // stop processing command on error
            if (error) {
                let i = len;
            }
        }
        return;
    }

    method int skipSpace(String input, int len, int i) {
        var boolean break;
        while ((i < len) & ~break) {
            if (input.charAt(i) = 32) {
                let i = i + 1;
            } else {
                let break = true;
            }
        }
        return i;
    }

    method int processRepeat(int times, String input, int i) {
        var int brackets, len;
        var boolean break;
        var String body;

        let len = input.length();
        let body = String.new(len - i);

        let i = skipSpace(input, len, i);

        // extract repeat body
        if (input.charAt(i) = 91) { // skip first [
            let i = i + 1;
            let brackets = brackets + 1;
            while ((i < len) & (brackets > 0)) {
                if (input.charAt(i) = 91) { // [ inside body
                    let brackets = brackets + 1;
                } else {
                    if (input.charAt(i) = 93) { // ] inside body
                        let brackets = brackets - 1;
                    }
                }
                if (brackets > 0) { // skip last ]
                    do body.appendChar(input.charAt(i));
                }
                let i = i + 1;
            }
        } else {
            let error = true;
            let message = "expected [ at beginning of repeat sequence";
        }

        if (brackets > 0) {
            let error = true;
            let message = "expected ] at end of repeat sequence";
        } else {
            // execute repeat body
            while (times > 0) {
                do parseInput(body);
                if (error) {
                    let times = 0; // skip processing body on error found
                } else {
                    let times = times - 1;
                }
            }
        }

        do body.dispose();
        return i;
    }

    method void processCommand(String cmd, int arg) {
        let error = true;
        if (StringUtil.equalsConstant(cmd, "QUIT")) {
            let quit = true;
            let error = false;
        }
        if (StringUtil.equalsConstant(cmd, "HELP")) {
            do cmdHelp();
        }
        if (StringUtil.equalsConstant(cmd, "DEMO")) {
            do cmdDemo(arg);
        }
        if (StringUtil.equalsConstant(cmd, "CS")) {
            do cmdClear();
        }
        if (StringUtil.equalsConstant(cmd, "FD")) {
            do cmdForward(arg);
        }
        if (StringUtil.equalsConstant(cmd, "BK")) {
            do cmdBack(arg);
        }
        if (StringUtil.equalsConstant(cmd, "RT")) {
            do cmdRight(arg);
        }
        if (StringUtil.equalsConstant(cmd, "LT")) {
            do cmdLeft(arg);
        }
        if (StringUtil.equalsConstant(cmd, "PD")) {
            do turtle.penDown();
            let error = false;
        }
        if (StringUtil.equalsConstant(cmd, "PU")) {
            do turtle.penUp();
            let error = false;
        }
        // TODO: Implement more logo commands (HOME, HIDETURTLE, etc.)
        if (error) {
            let message = "Unknown command (type HELP to learn commands)";
        }
        return;
    }

    method void cmdHelp() {
        do Screen.clearScreen();
        do Output.moveCursor(0, 0);
        do StringUtil.printConstant("HELP"); do Output.println();
        do StringUtil.printConstant("----"); do Output.println();
        do Output.println();
        do StringUtil.printConstant("HELP          Show this help screen"); do Output.println();
        do StringUtil.printConstant("QUIT          Quit program"); do Output.println();
        do StringUtil.printConstant("DEMO id       Demonstration mode (where id = 0 to 3)"); do Output.println();
        do Output.println();
        do StringUtil.printConstant("CS            Clear screen"); do Output.println();
        do StringUtil.printConstant("FD distance   Move forward"); do Output.println();
        do StringUtil.printConstant("BK distance   Move backwards"); do Output.println();
        do StringUtil.printConstant("RT angle      Turn right"); do Output.println();
        do StringUtil.printConstant("LT angle      Turn left"); do Output.println();
        do StringUtil.printConstant("PD            Pen down (start drawing)"); do Output.println();
        do StringUtil.printConstant("PU            Pen up (stop drawing)"); do Output.println();
        do Output.println();
        do StringUtil.printConstant("REPEAT times [ commands ]"); do Output.println();
        do StringUtil.printConstant("              Repeat the list of commands inside brackets"); do Output.println();
        do Output.println();
        do StringUtil.printConstant("*NOTE* It is possible to enter more than one command per line."); do Output.println();

        do Output.println();
        do StringUtil.printConstant("Press any key to continue..."); do Output.println();
        do Keyboard.readChar();
        do cmdClear();
        let error = false;
        return;
    }

    method void cmdClear() {
        do Screen.clearScreen();
        do turtle.reset();
        do turtle.draw();
        let error = false;
        return;
    }

    method void cmdForward(int dist) {
        if ((dist < 0) | (dist > 320)) {
            let message = "Sorry, I can't move that much. :(";
            let error = true;
        } else {
            do turtle.forward(dist);
            do turtle.draw();
            let error = false;
        }
        return;
    }

    method void cmdBack(int dist) {
        if ((dist < 0) | (dist > 320)) {
            let message = "Sorry, I can't move that much. :(";
            let error = true;
        } else {
            do turtle.back(dist);
            do turtle.draw();
            let error = false;
        }
        return;
    }

    method void cmdRight(int angle) {
        if ((angle < 0) | (angle > 360)) {
            let message = "Sorry, I can't turn that much. :(";
            let error = true;
        } else {
            do turtle.right(angle);
            do turtle.draw();
            let error = false;
        }
        return;
    }

    method void cmdLeft(int angle) {
        if ((angle < 0) | (angle > 360)) {
            let message = "Sorry, I can't turn that much. :(";
            let error = true;
        } else {
            do turtle.left(angle);
            do turtle.draw();
            let error = false;
        }
        return;
    }

    method void cmdDemo(int id) {
        var Array demo;
        var String input;
        var int size, i;
        if (id = 1) {
            let size = 2;
            let demo = Array.new(size);
            let demo[0] = "CS";
            let demo[1] = "REPEAT 4 [FD 120 RT 90]";
        }
        if (id = 2) {
            let size = 2;
            let demo = Array.new(size);
            let demo[0] = "CS";
            let demo[1] = "REPEAT 36 [ REPEAT 36 [ FD 10 RT 10] LT 10]";
        }
        if (id = 3) {
            let size = 10;
            let demo = Array.new(size);
            let demo[0] = "CS";
            // Draw sun
            let demo[1] = "PU FD 50";
            let demo[2] = "REPEAT 10 [ LT 90 PU FD 5 PD FD 10 PU BK 15 RT 126 PD FD 15 ]";
            // Draw roof (triangle)
            let demo[3] = "PU BK 100 PD RT 90";
            let demo[4] = "REPEAT 3 [ FD 50 LT 120 ]";
            // Draw house (square)
            let demo[5] = "RT 90 FD 50";
            let demo[6] = "REPEAT 4 [ LT 90 FD 50 ]";
            // Draw door
            let demo[7] = "LT 90 FD 30";
            let demo[8] = "LT 90 FD 20 LT 90 FD 10";
            let demo[9] = "LT 90 FD 20 LT 90 FD 10";
        }
        if (size = 0) {
            let size = 37;
            let demo = Array.new(size);
            let demo[0] = "CS";
            let demo[1] = "LT 90";
            let demo[2] = "FD 100";
            let demo[3] = "RT 90";
            let demo[4] = "FD 100";
            let demo[5] = "RT 90";
            let demo[6] = "FD 25";
            let demo[7] = "RT 90";
            let demo[8] = "FD 75";
            let demo[9] = "LT 90";
            let demo[10] = "FD 25";
            let demo[11] = "RT 90";
            let demo[12] = "FD 25";
            let demo[13] = "BK 50";
            let demo[14] = "LT 90";
            let demo[15] = "FD 50";
            let demo[16] = "RT 90";
            let demo[17] = "FD 50";
            let demo[18] = "LT 90";
            let demo[19] = "FD 25";
            let demo[20] = "RT 90";
            let demo[21] = "FD 25";
            let demo[22] = "RT 90";
            let demo[23] = "FD 75";
            let demo[24] = "LT 90";
            let demo[25] = "FD 25";
            let demo[26] = "LT 90";
            let demo[27] = "FD 100";
            let demo[28] = "LT 90";
            let demo[29] = "FD 100";
            let demo[30] = "LT 90";
            let demo[31] = "FD 50";
            let demo[32] = "BK 100";
            let demo[33] = "LT 90";
            let demo[34] = "FD 50";
            let demo[35] = "RT 90";
            let demo[36] = "FD 50";
        }

        do Output.moveCursor(0, 0);
        while (i < size) {
            let input = demo[i];
            if (i > 0) {
                if (i < 19) {
                    do Output.moveCursor(i, 0);
                } else {
                    do Output.moveCursor(i - 19, 58);
                }
                do Output.printString(input);
                do Sys.wait(500);
            }
            do parseInput(input);
            if (i = 0) { // wait to print CS command only after clearscreen
                do Output.moveCursor(0, 0);
                do Output.printString(input);
                do Sys.wait(500);
            }
            do input.dispose();
            let i = i + 1;
        }

        do demo.dispose();
        let error = false;
        return;
    }

}