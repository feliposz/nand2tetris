// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let ram[2048] = 14334; // 16384 (total memory) - 2048 (start of heap) - 2 (head of list)
        let ram[2049] = 2050; // point to start of free memory
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array node;
        if (size < 1) {
            do Sys.error(5); // invalid size request
        }
        let node = 2048; // first heap block
        while (node[0] < size) { // skip smaller blocks
            let node = node[1]; // advance
        }
        if ((node + size) > 16379) { // reached end of heap
            do Sys.error(6); // no free node found
        }
        if (node[0] > (size + 2)) { // requested size is less than free space
            // split block by creating a new free block after it
            let node[size + 2] = node[0] - size - 2; // size of next free block
            if (node[1] = (node + 2)) {
                let node[size + 3] = node + size + 4;
            } else {
                let node[size + 3] = node[1]; // update new block next to point to next of block being allocated
            }
            let node[1] = node + size + 2; // point to new free block
        }
        let node[0] = 0; // mark block in use (size = 0)
        return node + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array node, next;
        let node = o - 2;
        let next = node[1];
        if (next[0] = 0) { // next block is in use
            let node[0] = node[1] - node - 2; // just restore block size
        } else { // next block is free
            // merge blocks
            let node[0] = node[1] - node + next[0]; // restore size and add to size of next
            if (next[1] = (next + 2)) {
                let node[1] = node + 2;
            } else {
                let node[1] = next[1];
            }
        }
        return;
    }

}
