// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freeList = 2048;
        let freeList[0] = null; // next
        let freeList[1] = 14336; // size
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array node, best, block;
        var int i;
        let best = null;
        let node = freeList;
        while (~(node = null)) {
            if (node[1] = (size + 2)) { // perfect fit
                let best = node;
                let node = null;
            } else {
                if (node[1] > (size + 2)) {
                    if (best = null) { // first found
                        let best = node;
                    } else {
                        if (node[1] < best[1]) { // found a smaller segment
                            let best = node;
                        }
                    }
                }
                let node = node[0]; // advance to next
            }
        }
        if (best = null) { // no free node found
            do Sys.error(6);
            return -1;
        } else {
            let block = best + best[1] - (size + 2); // allocate block at end of free space
            let block[0] = null; // next
            let block[1] = size; // size
            let best[1] = best[1] - (size + 2); // shrink free space
            return block + 2; // allocated address start after next and size
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[-2] = freeList;
        let freeList = o-2;
        return;
    }    
}
