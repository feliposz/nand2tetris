// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // If C-instruction, decode bits
    And(a=instruction[15], b=instruction[12], out=a);  // select A / M register
    And(a=instruction[15], b=instruction[11], out=c1); // comp bit zx
    And(a=instruction[15], b=instruction[10], out=c2); // comp bit nx
    And(a=instruction[15], b=instruction[9], out=c3); // comp bit zy
    And(a=instruction[15], b=instruction[8], out=c4); // comp bit ny
    And(a=instruction[15], b=instruction[7], out=c5); // comp bit f
    And(a=instruction[15], b=instruction[6], out=c6); // comp bit no
    And(a=instruction[15], b=instruction[5], out=d1); // dest bit A
    And(a=instruction[15], b=instruction[4], out=d2); // dest bit D
    And(a=instruction[15], b=instruction[3], out=writeM); // dest bit M
    And(a=instruction[15], b=instruction[2], out=j1); // jump bit LT
    And(a=instruction[15], b=instruction[1], out=j2); // jump bit EQ
    And(a=instruction[15], b=instruction[0], out=j3); // jump bit GT
    // If A-instruction, set type
    Not(in=instruction[15], out=isTypeA);

    // Handle instruction and register A load
    Or(a=isTypeA, b=d1, out=loadRegA); // @value or d1 set (store A)
    Mux16(a=outALU, b=instruction, sel=isTypeA, out=inRegA); // store ALU out or 'value'?
    ARegister(in=inRegA, load=loadRegA, out=outRegA, out[0..14]=addressM);

    // Handle Y input to ALU (select A or M register)
    Mux16(a=outRegA, b=inM, sel=a, out=outRegAM); // select A or M register

    // Handle register D load if d2 set (store D)
    DRegister(in=outALU, load=d2, out=outRegD);

    // Handle branching
    Or(a=isZero, b=isNeg, out=notPos);
    Not(in=notPos, out=isPos);
    And(a=isNeg, b=j1, out=jmpLT);
    And(a=isZero, b=j2, out=jmpEQ);
    And(a=isPos, b=j3, out=jmpGT);
    Or(a=jmpLT, b=jmpGT, out=jmpNE);
    Or(a=jmpEQ, b=jmpNE, out=doJump);
    Not(in=doJump, out=doIncrement);

    PC(in=outRegA, load=doJump, inc=doIncrement, reset=reset, out[0..14]=pc);

    ALU(x=outRegD, y=outRegAM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outALU, out=outM, zr=isZero, ng=isNeg);
}