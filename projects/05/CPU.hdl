// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 <- bits
    // A  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  <- A-instruction type
    // C  -  -  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3 <- C-instruction type

    // Handle instruction and register A load
    Not(in=instruction[15], out=isTypeA);
    Or(a=isTypeA, b=instruction[5], out=loadRegA); // if isTypeA or d1 = 1 (destination A) then loadRegA = 1
    Mux16(a=outALU, b=instruction, sel=isTypeA, out=inRegA); // if isTypeA then A = instruction(data) else A = ALU output
    ARegister(in=inRegA, load=loadRegA, out=outRegA, out[0..14]=addressM);

    // Handle Y input to ALU (select A or M register)
    Mux16(a=outRegA, b=inM, sel=instruction[12], out=inY); // if a = 0 then inY = A else inY = M

    // Handle register D load if C-instruction and d2 = 1
    And(a=instruction[15], b=instruction[4], out=loadRegD);
    DRegister(in=outALU, load=loadRegD, out=inX);

    // Handle memory write if C-instruction and d3 = 1
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Handle jumps vs. increment PC

    // instruction[2] = j1 = jump on out < 0
    // instruction[1] = j2 = jump on out = 0
    // instruction[0] = j3 = jump on out > 0
    // if zr = 1 and j2 = 1 then jump
    // if ng = 1 and j1 = 1 then jump
    // if zr = 0 and ng = 0 and j3 = 1 then jump

    Not(in=isZero, out=notZero);
    Not(in=isNeg, out=notNeg);
    And(a=notZero, b=notNeg, out=isPos);
    And(a=isNeg, b=instruction[2], out=jumpOnLesser);
    And(a=isZero, b=instruction[1], out=jumpOnEqual);
    And(a=isPos, b=instruction[0], out=jumpOnGreater);
    Or(a=jumpOnLesser, b=jumpOnGreater, out=jumpOnNonEqual);
    Or(a=jumpOnEqual, b=jumpOnNonEqual, out=anyJump);
    Not(in=anyJump, out=noJump);
    Or(a=noJump, b=isTypeA, out=doIncrement);
    Not(in=doIncrement, out=doJump);

    PC(in=outRegA, load=doJump, inc=doIncrement, reset=reset, out[0..14]=pc);

    ALU(x=inX, y=inY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=isZero, ng=isNeg);
}